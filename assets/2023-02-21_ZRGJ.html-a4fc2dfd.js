import{_ as s,p as a,q as e,a1 as p}from"./framework-596b4733.js";const t={};function o(c,n){return a(),e("div",null,[...n[0]||(n[0]=[p(`<h1 id="中软国际-前端面试" tabindex="-1"><a class="header-anchor" href="#中软国际-前端面试" aria-hidden="true">#</a> 中软国际 - 前端面试</h1><blockquote><p>面试时间：2023-02-21</p><p>公司全称：中软国际科技服务有限公司（分公司）</p><p>公司性质：人力外派 💥</p><p>公司位置：广州天河区广东长线大厦1</p></blockquote><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><h6 id="防抖与节流的理解-各自的应用场景" tabindex="-1"><a class="header-anchor" href="#防抖与节流的理解-各自的应用场景" aria-hidden="true">#</a> 防抖与节流的理解？各自的应用场景？</h6><details class="custom-container details"><summary>查看答案</summary><p>防抖：在一次操作过程中，如果有新的操作则重新刷新定时器。应用：输入框输入后延迟自动搜索。</p><p>节流：前一次操作未完成时无法开启下一次操作。应用：下拉刷新和上拉加载更多。</p></details><hr><h6 id="浅拷贝与深拷贝的理解" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝的理解" aria-hidden="true">#</a> 浅拷贝与深拷贝的理解</h6><details class="custom-container details"><summary>查看答案</summary><p>浅拷贝：拷贝对象的引用，对于复杂数据类型而言拷贝后的数据更改会影响原数据。</p><p>深拷贝：创建一块新的内存空间用于存储拷贝后的数据，拷贝数据与原数据由于地址不同，所以互不影响</p></details><hr><h6 id="this-指向的几种情况" tabindex="-1"><a class="header-anchor" href="#this-指向的几种情况" aria-hidden="true">#</a> this 指向的几种情况</h6><details class="custom-container details"><summary>查看答案</summary><p>大多数情况下，函数调用方式决定了 this 的指向。</p><p>全局环境中定义的函数，this 指向 window。</p><p>new 关键字创建的实例对象，this 指向这个实例对象。</p><p>如果使用 apply()、call()、bind() 进行借调操作，this 指向这些方法第一个参数所绑定的对象。</p><p>箭头函数由于没有 this，它内部的 this 指向外层函数的 this，如果外层函数也没有 this，逐层向上找，直到 window 对象为止。</p></details><hr><h6 id="单页应用与多页应用的区别" tabindex="-1"><a class="header-anchor" href="#单页应用与多页应用的区别" aria-hidden="true">#</a> 单页应用与多页应用的区别</h6><details class="custom-container details"><summary>查看答案</summary><p>单页：应用只有一个 HTML 作为入口，一开始只需要加载一次 JS、CSS 等资源。页面的切换都是由路由去完成组件的切换，仅刷新局部资源。但无法实现 SEO 且首屏加载相对较慢。</p><p>多页：包含多个独立页面的应用，访问每一个页面都必须重新加载 JS、CSS　等资源。页面跳转需要整个页面刷新，用户体验不友好。由于返回完整的页面内容，利于 SEO。</p></details><hr><h6 id="vue-的优势" tabindex="-1"><a class="header-anchor" href="#vue-的优势" aria-hidden="true">#</a> Vue 的优势</h6><details class="custom-container details"><summary>查看答案</summary><p>渐进式：易上手，开发者可以从简单的组件开始，逐渐去搭建复杂的系统。</p><p>轻量级：框架体积小。</p><p>组件化：组件化开发，提高开发效率。</p><p>MVVM 数据双向绑定：模型、视图同步更新，减少 dom 操作。</p><p>高性能：虚拟 dom + diff 算法。</p><p>插件化：插件生态丰富。</p></details><hr><h6 id="谈谈你对渐进式的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对渐进式的理解" aria-hidden="true">#</a> 谈谈你对渐进式的理解？</h6><details class="custom-container details"><summary>查看答案</summary><p>学习时可以从某个很小的部分入手，循序渐进，在后续通过增量学习的方式扩充所需的项目功能。</p></details><hr><h6 id="vue-父子组件如何传值" tabindex="-1"><a class="header-anchor" href="#vue-父子组件如何传值" aria-hidden="true">#</a> Vue 父子组件如何传值？</h6><details class="custom-container details"><summary>查看答案</summary><p>父传子：父组件通过在子组件上添加属性的方式传递数据，子组件通过 props 属性接收。</p><p>子传父：子组件通过 <code>this.$emit(&#39;eventName&#39;, data)</code> 回传事件的方式传递数据，父组件通过 <code>@eventName=&#39;fn&#39;</code> 绑定事件函数接收。</p></details><hr><h6 id="vue-组件封装过程" tabindex="-1"><a class="header-anchor" href="#vue-组件封装过程" aria-hidden="true">#</a> Vue 组件封装过程</h6><details class="custom-container details"><summary>查看答案</summary><p>将公共常用的部分提取出去。通过 props 接收父组件传递的数据，通过 this.$emit() 传递事件的方式将数据传递给父组件。</p></details><hr><h6 id="v-model-的实现原理" tabindex="-1"><a class="header-anchor" href="#v-model-的实现原理" aria-hidden="true">#</a> v-model 的实现原理</h6><details class="custom-container details"><summary>查看答案</summary><p>通过 :value 绑定响应式数据，@input 触发事件获取当前 $event.target.value，再赋值给 :value 绑定的变量。</p></details><hr><h6 id="computed-与-watch-的区别" tabindex="-1"><a class="header-anchor" href="#computed-与-watch-的区别" aria-hidden="true">#</a> computed 与 watch 的区别</h6><details class="custom-container details"><summary>查看答案</summary><p>computed 计算属性基于 data 中声明过或 props 传递过来的数据通过计算得到一个新值，新值会根据已知值得变化而变化，且 computed 具有缓存功能，多次使用同一个 computed 计算得属性值，只会执行一次 computed 内定义的 function，直到依赖项改变才会重新计算。</p><p>watch 监听属性可以用来监听 data、props、computed 内的数据变化，然后执行某些具体的业务操作，当属性变化时，监听的的回调函数会自动执行。</p><p>对于多个监听对象要进行同一操作，watch 需要监听多次，而 computed 只需要执行一次。 在执行异步或开销比较大的操作时，watch 方式更合适。</p></details><hr><h2 id="笔试题" tabindex="-1"><a class="header-anchor" href="#笔试题" aria-hidden="true">#</a> 笔试题</h2><h6 id="题目1-实现-compareversion-方法-用于比较两个版本号-version1、version2-。1-如果version1-version2-返回1-2-如果version1-version2-返回-1-3-其他情况-返回0。版本号规则x-y-z-xyz均为大于等于0的整数-至少有x位" tabindex="-1"><a class="header-anchor" href="#题目1-实现-compareversion-方法-用于比较两个版本号-version1、version2-。1-如果version1-version2-返回1-2-如果version1-version2-返回-1-3-其他情况-返回0。版本号规则x-y-z-xyz均为大于等于0的整数-至少有x位" aria-hidden="true">#</a> 题目1：实现 compareVersion 方法，用于比较两个版本号（version1、version2）。1） 如果version1 &gt; version2，返回1；2）如果version1 &lt; version2，返回-1；3）其他情况，返回0。版本号规则<code>x.y.z</code>，xyz均为大于等于0的整数，至少有x位</h6><p>目标：</p><p>compareVersion(&#39;0.1&#39;, &#39;1.1.1&#39;); // 返回-1</p><p>compareVersion(&#39;13.37&#39;, &#39;1.2 &#39;); // 返回1</p><p>compareVersion(&#39;1.1&#39;, &#39;1.1.0&#39;); // 返回0</p><p>compareVersion(&#39;1.1&#39;, &#39;1.1.1&#39;); // 返回-1</p><details class="custom-container details"><summary>查看答案</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 题目1：
 *
 * 问题：实现 compareVersion 方法，用于比较两个版本号（version1、version2）
 *      如果version1 &gt; version2，返回1；
 *      如果version1 &lt; version2，返回-1；
 *      其他情况，返回0。
 *      版本号规则\`x.y.z\`，xyz均为大于等于0的整数，至少有x位
 *
 * 目标：
 * \`\`\`js
 * compareVersion(&#39;0.1&#39;, &#39;1.1.1&#39;); // 返回-1
 * compareVersion(&#39;13.37&#39;, &#39;1.2 &#39;); // 返回1
 * compareVersion(&#39;1.1&#39;, &#39;1.1.0&#39;); // 返回0
 * compareVersion(&#39;1.1&#39;, &#39;1.1.1&#39;); // 返回-1
 * \`\`\`
 */</span>
<span class="token keyword">function</span> <span class="token function">compareVersion</span><span class="token punctuation">(</span><span class="token parameter">version1<span class="token punctuation">,</span> version2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 这里写代码实现</span>
<span class="token comment">// 版本号字符串转成数字数组</span>
  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> version1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> version2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>

  <span class="token comment">// 长度不同时补 0 以保证长度一致</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 比较每一位数字的大小</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 相等返回 0</span>
  <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="题目2-井字棋游戏。输入一个二维数组代表棋盘-其中『1』代表当前玩家的棋子-『0』代表没有棋子-『-1』代表对方玩家的棋子。若一方棋子在横、竖、斜方向连成排则为获胜-返回当前玩家是否胜出" tabindex="-1"><a class="header-anchor" href="#题目2-井字棋游戏。输入一个二维数组代表棋盘-其中『1』代表当前玩家的棋子-『0』代表没有棋子-『-1』代表对方玩家的棋子。若一方棋子在横、竖、斜方向连成排则为获胜-返回当前玩家是否胜出" aria-hidden="true">#</a> 题目2：井字棋游戏。输入一个二维数组代表棋盘，其中『1』代表当前玩家的棋子，『0』代表没有棋子，『-1』代表对方玩家的棋子。若一方棋子在横、竖、斜方向连成排则为获胜，返回当前玩家是否胜出</h6><p>示例：入参为 [[1,0,1],[1,-1,-1],[1,-1,0]] 时，返回 true</p><details class="custom-container details"><summary>查看答案</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 题目2：
 *
 * 问题：井字棋游戏。输入一个二维数组代表棋盘，其中
 *     『1』代表当前玩家的棋子，『0』代表没有棋子，『-1』代表对方玩家的棋子。
 *      若一方棋子在横、竖、斜方向连成排则为获胜，返回当前玩家是否胜出。
 * 示例：入参为 [[1,0,1],[1,-1,-1],[1,-1,0]] 时，返回 true
 *
 */</span>
<span class="token keyword">function</span> <span class="token function">gameCheck</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 这里写代码实现</span>
<span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token comment">// 检查行</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 检查列</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 检查 2 条对角线</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,45)])])}const l=s(t,[["render",o],["__file","2023-02-21_ZRGJ.html.vue"]]);export{l as default};
