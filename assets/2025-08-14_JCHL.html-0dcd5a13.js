import{_ as s,p as a,q as t,a1 as e}from"./framework-596b4733.js";const p={};function o(l,n){return a(),t("div",null,[...n[0]||(n[0]=[e(`<h1 id="金财互联-前端面试" tabindex="-1"><a class="header-anchor" href="#金财互联-前端面试" aria-hidden="true">#</a> 金财互联 - 前端面试</h1><blockquote><p>面试时间：2025-08-14</p><p>公司全称：方欣科技有限公司</p><p>公司位置：广州市黄埔区科学大道82-88号（双号）绿地中央广场C3栋</p></blockquote><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><h6 id="typescript-中-type-和-interface-有什么区别" tabindex="-1"><a class="header-anchor" href="#typescript-中-type-和-interface-有什么区别" aria-hidden="true">#</a> TypeScript 中 type 和 interface 有什么区别？</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>扩展方式不同：interface 使用 extends；type 使用 &amp;（交叉类型）</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// interface 使用 extends</span>
<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token comment">// type 使用 &amp;（交叉类型）</span>
<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Dog</span> <span class="token operator">=</span> Animal <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>interface 支持重复定义来进行合并声明，type 不允许重复定义：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token comment">// 最终 User = {name: string; age: number}</span>

<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token comment">// ❌ Error: Duplicate identifier &#39;User&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>interface 适合定义对象结构、需要扩展或合并的情况、类实现（implement）；type 适合定义联合类型、元组、复杂类型、使用 typeof、keyof、in等高级类型操作</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// interface 适合定义对象结构、需要扩展或合并的情况、类实现（implement）</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token comment">// type 适合定义联合类型、元组、复杂类型、使用 typeof、keyof、in等高级类型操作</span>
<span class="token keyword">type</span> <span class="token class-name">Status</span> <span class="token operator">=</span> <span class="token string">&quot;success&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;error&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person
<span class="token keyword">type</span> <span class="token class-name">PartialPerson</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="前端的安全防范措施有哪些" tabindex="-1"><a class="header-anchor" href="#前端的安全防范措施有哪些" aria-hidden="true">#</a> 前端的安全防范措施有哪些？</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>跨站脚本攻击（XSS）防护：使用 DOMPurify 等库对用户输入进行净化。</li><li>跨站请求伪造（CSRF）防护：设置 CSRF 随机 Token 的表单隐藏域；服务器响应头添加 ​Set-Cookie 属性设置值 SameSit=Strict。</li><li>敏感数据保护：避免前端存储敏感信息​，​​加密敏感数据再进行传输。​</li></ol></details><hr><h6 id="二次封装组件-如何把原组件所有属性、方法、插槽开放出去直接使用" tabindex="-1"><a class="header-anchor" href="#二次封装组件-如何把原组件所有属性、方法、插槽开放出去直接使用" aria-hidden="true">#</a> 二次封装组件，如何把原组件所有属性、方法、插槽开放出去直接使用？</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>Vue2 中：<code>v-bind=$attrs</code> 透传所有属性，<code>v-on=$listeners</code> 透传所有方法，<code>&lt;slot&gt;&lt;/slot&gt;</code> 透传默认插槽，遍历 <code>$scopedSlots</code> 透传所有具名插槽。</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> 
    <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span> 
    <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$listeners<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-wrapper<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 透传默认插槽 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- 透传具名插槽 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(_, slot) in $scopedSlots<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[slot]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slot<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 防止属性被应用到根元素</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Vue3 中，<code>v-bind=$attrs</code> 透传所有属性和方法，遍历 <code>$slots</code> 透传所有插槽。</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> 
    <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mergedProps<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 透传所有插槽 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(_, name) in $slots<span class="token punctuation">&quot;</span></span> <span class="token attr-name">#[name]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotData || {}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAttrs<span class="token punctuation">,</span> useSlots <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token function">useSlots</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 可以在这里添加/修改属性</span>
<span class="token keyword">const</span> mergedProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>attrs<span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> attrs<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;primary&#39;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>React 中，使用 ...rest 扩展运算符暴露所有属性和方法。</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AntButton</span></span> 
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span></span>
      <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">my-wrapper </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rest<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AntButton</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="vue3-中-子组件模板中只有单个根元素且根元素通过-v-bind-attrs-进行属性和方法透传-父组件传递属性或方法时-会传递到哪里-当子组件模板中有两个根标签且这两个根标签都通过-v-bind-attrs-进行属性和方法透传-父组件在传递属性或方法时-会传递给哪一个标签" tabindex="-1"><a class="header-anchor" href="#vue3-中-子组件模板中只有单个根元素且根元素通过-v-bind-attrs-进行属性和方法透传-父组件传递属性或方法时-会传递到哪里-当子组件模板中有两个根标签且这两个根标签都通过-v-bind-attrs-进行属性和方法透传-父组件在传递属性或方法时-会传递给哪一个标签" aria-hidden="true">#</a> Vue3 中，子组件模板中只有单个根元素且根元素通过 <code>v-bind=&#39;attrs&#39;</code> 进行属性和方法透传，父组件传递属性或方法时，会传递到哪里？当子组件模板中有两个根标签且这两个根标签都通过 <code>v-bind=&#39;attrs&#39;</code> 进行属性和方法透传，父组件在传递属性或方法时，会传递给哪一个标签？</h6><details class="custom-container details"><summary>查看答案</summary><p>单个根元素 + <code>v-bind=&quot;$attrs&quot;</code>：父组件传递的非 props/emits 属性​​都会自动绑定到这个根元素上。</p><p>多个根元素 + 都使用 v-bind=&quot;$attrs&quot;：父组件传递的非 props/emits 属性​​会同时应用到所有根元素上。</p></details><hr><h6 id="microapp-沙箱机制的原理" tabindex="-1"><a class="header-anchor" href="#microapp-沙箱机制的原理" aria-hidden="true">#</a> MicroApp 沙箱机制的原理？</h6><details class="custom-container details"><summary>查看答案</summary><p>主要通过 Proxy 代理来为每个子应用创建一个独立、隔离的 JavaScript 运行环境。</p></details><hr><h6 id="microapp-主应用如何向子应用传递数据" tabindex="-1"><a class="header-anchor" href="#microapp-主应用如何向子应用传递数据" aria-hidden="true">#</a> MicroApp 主应用如何向子应用传递数据？</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>data 属性传递。</li><li>主应用通过 window 对象传递。</li><li>主应用通过 <code>microApp.setData(&#39;child-app&#39;, { updatedAt: Date.now() })</code> 发送数据给指定子应用。</li><li>主应用通过 <code>microApp.setGlobalData({ version: &#39;1.0.0&#39; })</code> 发送全局数据（所有子应用能够接收访问到）。</li><li>主应用通过 <code>microApp.dispath(&#39;child-app&#39;, { type: &#39;route-change&#39;, path: &#39;/dashboard&#39;})</code> 发送事件的方式传递数据。</li><li>主应用访问子应用通过 url 传参的方式传递数据。</li><li>使用 localStorage 传递数据。</li></ol></details><hr><h6 id="microapp-主应用路由到子应用的方式有几种" tabindex="-1"><a class="header-anchor" href="#microapp-主应用路由到子应用的方式有几种" aria-hidden="true">#</a> MicroApp 主应用路由到子应用的方式有几种？</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>通过 url 属性进行路由。</li></ol></details><hr><h6 id="说说双-token-校验的实现过程" tabindex="-1"><a class="header-anchor" href="#说说双-token-校验的实现过程" aria-hidden="true">#</a> 说说双 token 校验的实现过程？</h6><details class="custom-container details"><summary>查看答案</summary><p>用户进行登录后，将后端返回的 token 和 refreshToken（刷新 token）存到本地储存中。当 token 失效时，发送请求后会执行响应拦截器的错误函数，在错误拦截器中拦截到状态码 401 则根据 refreshToken 重新去获取新的 token，如果能获取到新的 token，则将新的 token 存入本地，并重发刚刚错误的请求，如果获取不到新的 token，说明 refreshToken 失效了，则弹出退出登录的提示框。</p></details><hr><h6 id="双-token-校验-获取到新的-token-后-怎么保证刚刚失败的所有请求能够重新发送" tabindex="-1"><a class="header-anchor" href="#双-token-校验-获取到新的-token-后-怎么保证刚刚失败的所有请求能够重新发送" aria-hidden="true">#</a> 双 token 校验，获取到新的 token 后，怎么保证刚刚失败的所有请求能够重新发送？</h6><details class="custom-container details"><summary>查看答案</summary><p>将所有失败的请求都保存到一个数组中，当获取到新的 token 后，将数组中的请求全部重新发送。</p></details><hr><h6 id="双-token-校验-获取到新的-token-后重发所有失败的请求-如何让请求成功后的那些操作逻辑能够继续执行" tabindex="-1"><a class="header-anchor" href="#双-token-校验-获取到新的-token-后重发所有失败的请求-如何让请求成功后的那些操作逻辑能够继续执行" aria-hidden="true">#</a> 双 token 校验，获取到新的 token 后重发所有失败的请求，如何让请求成功后的那些操作逻辑能够继续执行？</h6><details class="custom-container details"><summary>查看答案</summary><p>在一个新的 Promise 中执行原始请求，通过 resolve() 可以触发外部调用方的 then 回调。</p></details><hr><h6 id="css-中-与-符号的区别" tabindex="-1"><a class="header-anchor" href="#css-中-与-符号的区别" aria-hidden="true">#</a> CSS 中 + 与 ~ 符号的区别？</h6><details class="custom-container details"><summary>查看答案</summary><p>两者都是兄弟选择器。其中 <code>+</code> 选中的是紧随其后的相邻兄弟元素；<code>~</code> 选中的是其后所有的兄弟元素。</p></details><hr><h6 id="vue2-组件中使用了-mixin-且-mixin-中也有生命周期函数-生命周期函数的执行顺序是怎样的" tabindex="-1"><a class="header-anchor" href="#vue2-组件中使用了-mixin-且-mixin-中也有生命周期函数-生命周期函数的执行顺序是怎样的" aria-hidden="true">#</a> vue2 组件中使用了 mixin，且 mixin 中也有生命周期函数，生命周期函数的执行顺序是怎样的？</h6><details class="custom-container details"><summary>查看答案</summary><p>先执行 mixin 的生命周期函数，再执行组件的生命周期函数。<code>mixin</code> 的 <code>beforeCreate</code> → 组件的 <code>beforeCreate</code> → mixin 的 <code>created</code> → 组件的 <code>created</code>...</p></details><hr>`,39)])])}const i=s(p,[["render",o],["__file","2025-08-14_JCHL.html.vue"]]);export{i as default};
