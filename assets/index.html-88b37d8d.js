import{_ as s,p as a,q as t,a1 as e}from"./framework-596b4733.js";const p={};function i(c,n){return a(),t("div",null,[...n[0]||(n[0]=[e(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h6 id="typescript-支持的访问修饰符有哪些" tabindex="-1"><a class="header-anchor" href="#typescript-支持的访问修饰符有哪些" aria-hidden="true">#</a> TypeScript 支持的访问修饰符有哪些？</h6><details class="custom-container details"><summary>查看答案</summary><p>支持以下 4 个访问修饰符。分别是 public（公共）、private（私有）、protected（受保护）、readonly（只读）。</p><ul><li>public：类的所有成员、子类以及类的实例都可以访问；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span>
  <span class="token keyword">public</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">再次介绍，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Tom</span>
c<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 我叫Tom</span>
c<span class="token punctuation">.</span><span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 再次介绍，我叫Tom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>private：只有类的成员可以访问，类的实例无法访问；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span>
  <span class="token keyword">public</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">再次介绍，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// 报错。属性 name 为私有属性，只能在类 Parent 中访问。</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 报错。属性 name 为私有属性，只能在类 Parent 中访问。</span>
c<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span><span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>protected：只能类及其子类的成员可以访问，类的实例无法访问；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span>
  <span class="token keyword">public</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">再次介绍，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 报错。属性 name 为私有属性，只能在类 Parent 及其子类中访问。</span>
c<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span><span class="token function">intro2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>readonly：只读成员，不可修改。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span>
  <span class="token keyword">public</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Andy&#39;</span> <span class="token comment">// 报错。无法为 name 赋值，因为它是只读属性。</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="定义一个数组-它的元素是字符类型或数值类型" tabindex="-1"><a class="header-anchor" href="#定义一个数组-它的元素是字符类型或数值类型" aria-hidden="true">#</a> 定义一个数组，它的元素是字符类型或数值类型</h6><details class="custom-container details"><summary>查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 方式一：</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 方式二：</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="定义一个元组-第一个元素是字符串类型-第二个元素是数值类型" tabindex="-1"><a class="header-anchor" href="#定义一个元组-第一个元素是字符串类型-第二个元素是数值类型" aria-hidden="true">#</a> 定义一个元组，第一个元素是字符串类型，第二个元素是数值类型</h6><details class="custom-container details"><summary>查看答案</summary><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> t<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><hr><h6 id="any-与-unknown-的区别" tabindex="-1"><a class="header-anchor" href="#any-与-unknown-的区别" aria-hidden="true">#</a> any 与 unknown 的区别</h6><details class="custom-container details"><summary>查看答案</summary><p>unknown 比 any 类型更安全。</p><p>any：任何类型可以赋值给 any，any 也可以赋值给任意类型；</p><p>unknown：任何类型可以赋值给 unknown，unknown 只能赋值给 any 或 unknown 类型。</p></details><hr><h6 id="declare-关键字的作用" tabindex="-1"><a class="header-anchor" href="#declare-关键字的作用" aria-hidden="true">#</a> declare 关键字的作用</h6><details class="custom-container details"><summary>查看答案</summary><p>用于声明全局变量、全局函数、全局类或全局枚举类型等。</p><p>使用场景：当我们需要在 ts 中使用 js 编写的第三方模块，为了处理找不到模块的情况，我们可以使用 declare 关键字去声明该第三方模块，从而可以在不改动原本 js 代码的情况下使用第三方模块。</p><p>我们在 ts 中可以直接使用 Math、JSON 或 Object 等全局变量都是因为 typescript 内部帮我们完成了声明操作，这些全局变量被声明在 <code>lib.es5.d.ts</code> 声明文件中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// typescript/lib/lib.es5.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> Math<span class="token operator">:</span> Math<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token constant">JSON</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">var</span> Object<span class="token operator">:</span> ObjectConstructor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h6 id="typescript-新增了哪些类型" tabindex="-1"><a class="header-anchor" href="#typescript-新增了哪些类型" aria-hidden="true">#</a> TypeScript 新增了哪些类型</h6><details class="custom-container details"><summary>查看答案</summary><p>新增了 13 种类型。分别为联合类型（<code>|</code>）、交叉类型（<code>&amp;</code>）、索引签名类型（<code>[key: type]: type</code>）、任意类型（any）、未知的值（unknown）、空值（void）、无值（never）、元组（tuple）、类型别名（type）、枚举（enum）、接口（interface）、泛型、字面量类型</p></details><h6 id="typescript-中-never-和-void-的区别" tabindex="-1"><a class="header-anchor" href="#typescript-中-never-和-void-的区别" aria-hidden="true">#</a> TypeScript 中 never 和 void 的区别</h6><details class="custom-container details"><summary>查看答案</summary><p>never：表示一个不包含值得类型，即表示永远不存在的值</p><p>void：表示没有任何类型（可以被赋值为 undefined）</p></details><h6 id="typescript-中-interface-和-type-的差别是什么" tabindex="-1"><a class="header-anchor" href="#typescript-中-interface-和-type-的差别是什么" aria-hidden="true">#</a> TypeScript 中 interface 和 type 的差别是什么</h6><details class="custom-container details"><summary>查看答案</summary><ul><li>type 可以而 interface 不可以。</li></ul><p>type 可以声明基本类型别名、联合类型、元组等类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token builtin">string</span>

<span class="token keyword">type</span> <span class="token class-name">Age</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>

<span class="token keyword">type</span> <span class="token class-name">Unite</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type 可以使用 typeof 获取实例的类型进行赋值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelect</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">type</span> <span class="token class-name">DomType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> dom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>interface 可以而 type 不可以。</li></ul><p>interface 能够进行声明合并</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">intro</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
最终 Person 接口为 
{
  name: string
  age: number
  intro: () =&gt; void
} 
*/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,21)])])}const l=s(p,[["render",i],["__file","index.html.vue"]]);export{l as default};
