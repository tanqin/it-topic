import{_ as e,M as o,p as c,q as l,a1 as a,R as s,t,N as i}from"./framework-596b4733.js";const u={},r={class:"custom-container details"},k={href:"https://react-fractals-git-react-18-swizec.vercel.app/",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const p=o("ExternalLinkIcon");return c(),l("div",null,[n[5]||(n[5]=a('<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h1><h6 id="简述下-react-的事件代理机制" tabindex="-1"><a class="header-anchor" href="#简述下-react-的事件代理机制" aria-hidden="true">#</a> 简述下 React 的事件代理机制？</h6><details class="custom-container details"><summary>查看答案</summary><p>事件处理函数并不会绑定到真实的节点上，而是绑定到 <code>id=&quot;root&quot;</code> 的根节点中，通过一个事件监听器维护一个映射来保存所有组件内部的事件监听和处理函数。</p><p>当组件挂载或卸载时，只是在统一的事件监听器上插入或删除对象。</p><p>当事件发生时，首先会经过统一的事件监听器，然后在映射里找到真正的事件处理函数并执行。</p></details><h6 id="react18新特性" tabindex="-1"><a class="header-anchor" href="#react18新特性" aria-hidden="true">#</a> React18新特性</h6>',4)),s("details",r,[n[2]||(n[2]=a(`<summary>查看答案</summary><p>state 状态更新批处理</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>flag<span class="token punctuation">,</span> setFlag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render...&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> count <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">测试页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>data<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">flag: </span><span class="token punctuation">{</span>flag<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，count、flag 的 setState() 完全可以合并成一次完成，从而减少 re-render 带来的性能损耗。</p><p>之前 React 的批处理只囊括 React 原生事件内部的更新，而在 React18 中，批处理的范围扩大到 Promise、setTimeout、原生事件处理函数等非 React 原生的事件等。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">setFlag</span><span class="token punctuation">(</span>flag <span class="token operator">=&gt;</span> <span class="token operator">!</span>flag<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的延时器，如果在 react17 中由于没有批处理，会使得 re-render 频繁触发，导致 setState() 执行多次，count 的值也会指数级增长。react18 中则是正常的 1s 触发一次。</p><h2 id="transitions" tabindex="-1"><a class="header-anchor" href="#transitions" aria-hidden="true">#</a> Transitions</h2><p>starTransition：用于标记非紧急的更新，用 starTransition 包裹起来就是告诉 React，这部分代码渲染的优先级不高，可以优先处理其它更重要的渲染。</p>`,9)),s("p",null,[n[1]||(n[1]=t("例子：",-1)),s("a",k,[n[0]||(n[0]=t("倾斜的毕达哥拉斯树",-1)),i(p)])]),n[3]||(n[3]=s("p",null,"useTransition：除了能提供 starTransition 以外，还能提供一个变量来跟踪当前渲染的执行状态。",-1)),n[4]||(n[4]=s("h2",{id:"suspense",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#suspense","aria-hidden":"true"},"#"),t(" Suspense")],-1))]),n[6]||(n[6]=a(`<h6 id="说说你对-usereducer-的理解" tabindex="-1"><a class="header-anchor" href="#说说你对-usereducer-的理解" aria-hidden="true">#</a> 说说你对 useReducer 的理解</h6><details class="custom-container details"><summary>查看答案</summary><p>reducer 是一个根据 action 提供的数据，将 state 从 A 转换为 B 的一个纯函数。</p><p>语法：<code>(state, action) =&gt; newState</code></p></details><h6 id="说说你对-react-hook的闭包陷阱的理解-有哪些解决方案" tabindex="-1"><a class="header-anchor" href="#说说你对-react-hook的闭包陷阱的理解-有哪些解决方案" aria-hidden="true">#</a> 说说你对 React Hook的闭包陷阱的理解，有哪些解决方案？</h6><details class="custom-container details"><summary>查看答案</summary><p>由于闭包的存在，导致无法获取到 state 更新后的值。</p><p>一个简单的例子如下：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于闭包的存在，我们点击按钮修改了 count 的值为 2，但是定时器中打印的 count 却始终是 1。</p><p>解决方案：</p><p>方式一：使用 useRef() 绑定数据。由于 <code>ref = useRef()</code> 中数据是保存在 ref.current 中的，也就是数据存在对象属性中，所以可以保证定时器中获取到的一定是最新的数据。</p><p>方式二：我们可以参考方式一的原理，将 useState() 绑定的数据定义为一个对象，就可以保证 state 中的数据跟定时器中的数据指向的是同一内存地址。</p></details><h6 id="react是否支持给标签设置自定义的属性-比如给video标签设置webkit-playsinline" tabindex="-1"><a class="header-anchor" href="#react是否支持给标签设置自定义的属性-比如给video标签设置webkit-playsinline" aria-hidden="true">#</a> react是否支持给标签设置自定义的属性，比如给video标签设置webkit-playsinline？</h6><details class="custom-container details"><summary>查看答案</summary><p>react15 之前是不可以的。 react16 以及之后版本可以设置，但是自定义的属性只能为 <code>string、number 或 object</code>。 所以可以这么添加：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>750<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">webkit-playsinline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://media.w3.org/2010/05/sintel/trailer.mp4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>video/mp4<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过 setAttribute 进行设置：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VideoComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  videoContainer<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    video<span class="token punctuation">.</span>autoplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    video<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    video<span class="token punctuation">.</span>muted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// fixes autoplay in chrome</span>
    video<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;playsinline&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fixes autoplay in webkit (ie. mobile safari)</span>

    <span class="token keyword">const</span> source <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://media.w3.org/2010/05/sintel/trailer.mp4&#39;</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;video/mp4&#39;</span><span class="token punctuation">;</span>
    video<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>videoContainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>videoContainer <span class="token operator">=</span> ref<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h6 id="应该在什么场景下使用-usememo-和-usecallback" tabindex="-1"><a class="header-anchor" href="#应该在什么场景下使用-usememo-和-usecallback" aria-hidden="true">#</a> 应该在什么场景下使用 useMemo 和 useCallback ？</h6><details class="custom-container details"><summary>查看答案</summary><p>两者可以用于避免两次渲染之间的重复计算。 要进行缓存处理时使用。 在一个数据项依赖于其它数据项时，使用 useMemo 可以防止不必要的计算。 一个函数具有依赖项，且该函数在多个地方都有使用，使用 useCallback 可以避免非必要的渲染。</p></details><h6 id="说说你对-dangerouslysetinnerhtml-的理解" tabindex="-1"><a class="header-anchor" href="#说说你对-dangerouslysetinnerhtml-的理解" aria-hidden="true">#</a> 说说你对 dangerouslySetInnerHTML 的理解</h6><details class="custom-container details"><summary>查看答案</summary><p>dangerouslySetInnerHTML 相当于 js 中 innerHTML 属性。 使用它是危险操作，存在跨站 XSS 攻击。 可以借助 DOMPurify 库的 sanitize() 方法来对代码进行净化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> DOMPurify <span class="token keyword">from</span> <span class="token string">&#39;dompurify&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;span onmouseover=&quot;alert(&#39;mouseover&#39;);&quot;&gt;mouseover&lt;/span&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> <span class="token function-variable function">sanitizedData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">__html</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div dangerouslySetInnerHTML<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">sanitizedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h6 id="你常用的-react-hooks-有哪些" tabindex="-1"><a class="header-anchor" href="#你常用的-react-hooks-有哪些" aria-hidden="true">#</a> 你常用的 React Hooks 有哪些？</h6><details class="custom-container details"><summary>查看答案</summary><p>useState useRef useEffect useLayoutEffect useMemo useCallback useContext useReducer</p></details>`,12))])}const b=e(u,[["render",d],["__file","index.html.vue"]]);export{b as default};
