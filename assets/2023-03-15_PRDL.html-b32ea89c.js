import{_ as a,p as s,q as t,a1 as p}from"./framework-596b4733.js";const e={};function o(c,n){return s(),t("div",null,[...n[0]||(n[0]=[p(`<h1 id="普睿德利-前端面试" tabindex="-1"><a class="header-anchor" href="#普睿德利-前端面试" aria-hidden="true">#</a> 普睿德利 - 前端面试</h1><blockquote><p>面试时间：2023-03-15</p><p>公司全称：北京普睿德利科技有限公司（广州分公司）</p><p>公司位置：广州市越秀区越华路</p></blockquote><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><h6 id="谈谈对-dom-的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对-dom-的理解" aria-hidden="true">#</a> 谈谈对 DOM 的理解</h6><details class="custom-container details"><summary>查看答案</summary><p>DOM 是文档对象模型。它以面向对象的方式描述对象模型，整个文档就是由一个个这样的对象以树形的结构组织在一起构建的。</p></details><hr><h6 id="说说常用-html-标签" tabindex="-1"><a class="header-anchor" href="#说说常用-html-标签" aria-hidden="true">#</a> 说说常用 HTML 标签</h6><details class="custom-container details"><summary>查看答案</summary><p>一般： h1~h6、div、span、p、a、img、video、table、ul、li。</p><p>语义化：header、nav、aside、main、article、section、footer。</p></details><hr><h6 id="table-标签下有哪些子标签" tabindex="-1"><a class="header-anchor" href="#table-标签下有哪些子标签" aria-hidden="true">#</a> table 标签下有哪些子标签</h6><details class="custom-container details"><summary>查看答案</summary><p>th、tr、td、caption、thead、tbody、tfoot</p></details><hr><h6 id="谈谈对盒子模型的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对盒子模型的理解" aria-hidden="true">#</a> 谈谈对盒子模型的理解</h6><details class="custom-container details"><summary>查看答案</summary><p>所有 HTML 元素都可以看作一个盒子，它的组成包括：content、padding、border、margin。</p></details><hr><h6 id="select-标签如何设置默认选中项" tabindex="-1"><a class="header-anchor" href="#select-标签如何设置默认选中项" aria-hidden="true">#</a> select 标签如何设置默认选中项</h6><details class="custom-container details"><summary>查看答案</summary><p>方法一：通过 option 标签的 selected 属性设置</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selected<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：通过 js 获取 option 元素设置 selected 属性值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="两个-html-页面如何共享全局变量" tabindex="-1"><a class="header-anchor" href="#两个-html-页面如何共享全局变量" aria-hidden="true">#</a> 两个 html 页面如何共享全局变量</h6><details class="custom-container details"><summary>查看答案</summary><p>方式一：使用会话存储或本地存储： 使用 window.sessionStorage.setItem() 存储变量，使用 window.sessionStorage.getItem() 获取变量； 也可以使用 window.localStorage 的 setItem() 和 getItem() 存取变量</p><p>方式二：使用路径传参： A页面跳转B页面时传递参数，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">goBPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;b.html&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?globalVar=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>window<span class="token punctuation">.</span>globalVar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B页面接收参数，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getGlobalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> globalVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;globalVar&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="js-遍历的方式" tabindex="-1"><a class="header-anchor" href="#js-遍历的方式" aria-hidden="true">#</a> JS 遍历的方式</h6><details class="custom-container details"><summary>查看答案</summary><p>数组方法：forEach、map、filter、find、findIndex、some、every、reduce</p><p>其它方法：for、for...in、for...of</p></details><hr><h6 id="js-如何创建一个类" tabindex="-1"><a class="header-anchor" href="#js-如何创建一个类" aria-hidden="true">#</a> JS 如何创建一个类</h6><details class="custom-container details"><summary>查看答案</summary><p>使用 class 关键字来创建一个类，类中可以定义成员变量、成员方法、构造函数。例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="js-如何使用工厂函数创建对象" tabindex="-1"><a class="header-anchor" href="#js-如何使用工厂函数创建对象" aria-hidden="true">#</a> JS 如何使用工厂函数创建对象</h6><details class="custom-container details"><summary>查看答案</summary><ol><li>定义一个工厂函数，定义形参，函数内部通过 new Object() 创建对象，并给对象赋值，最后返回创建的对象。例子如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  obj<span class="token punctuation">.</span><span class="token function-variable function">intro</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;Andy&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
p2<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h6 id="前端性能优化的方案有哪些" tabindex="-1"><a class="header-anchor" href="#前端性能优化的方案有哪些" aria-hidden="true">#</a> 前端性能优化的方案有哪些</h6><details class="custom-container details"><summary>查看答案</summary><p>减少请求。比如使用精灵图、合并 css 和 js、资源缓存处理。</p><p>图片优化。比如图片压缩、图片懒加载。</p><p>CDN 加速。</p><p>代码压缩。比如 Gzip 压缩处理。</p></details><hr>`,33)])])}const i=a(e,[["render",o],["__file","2023-03-15_PRDL.html.vue"]]);export{i as default};
